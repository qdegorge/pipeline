# Déclencheur : la pipeline s'exécute à chaque push sur la branche 'main'
trigger:
- main

# Agent sur lequel la pipeline va s'exécuter
pool:
  vmImage: 'ubuntu-latest'

# Lier le groupe de variables créé dans la "Library" d'Azure DevOps
variables:
- group: DTRACK_API # 
# Les étapes de la pipeline sont organisées en "jobs"
jobs:
- job: Build_and_Upload_SBOM
  displayName: 'Générer et envoyer le SBOM'
  steps:

  # -- ÉTAPE 1 : Préparation de l'environnement (exemple pour Node.js) --
  - task: NodeTool@0
    inputs:
      versionSpec: '18.x' # Spécifiez la version de Node.js nécessaire pour votre projet
    displayName: 'Installer Node.js'

  - script: npm install
    displayName: 'Installer les dépendances du projet'

  # -- ÉTAPE 2 : Installation de CycloneDX et génération du SBOM --
  - script: npm install -g @cyclonedx/cyclonedx-npm
    displayName: 'Installer l''outil CycloneDX pour npm'

  - script: |
      cyclonedx-npm --output-format JSON --output-file $(Build.ArtifactStagingDirectory)/sbom.json
    displayName: 'Générer le SBOM au format CycloneDX'

  # -- ÉTAPE 3 : Envoi du SBOM à Dependency-Track --
  - task: Bash@3
    displayName: 'Envoyer le SBOM à Dependency-Track'
    inputs:
      targetType: 'inline'
      script: |
        echo "Téléversement du fichier sbom.json vers Dependency-Track..."

        # Nom et version du projet dans Dependency-Track
        # Vous pouvez les coder en dur ou utiliser des variables
        PROJECT_NAME="ResearchDependencyTrack"
        PROJECT_VERSION="$(Build.BuildNumber)" # Utilise le numéro de build d'Azure DevOps comme version

        # Appel de l'API Dependency-Track avec curl
        curl -X "POST" \
             -H "X-Api-Key: $(DTACK_API_KEY)" \
             -H "Content-Type: multipart/form-data" \
             -F "autoCreate=true" \
             -F "projectName=${PROJECT_NAME}" \
             -F "projectVersion=${PROJECT_VERSION}" \
             -F "bom=@$(Build.ArtifactStagingDirectory)/sbom.json" \
             "$(DT_API_URL)/api/v1/bom"
