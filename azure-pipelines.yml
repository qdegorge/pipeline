# ===================================================================
# PIPELINE COMPLÈTE AVEC DÉBOGAGE
# ===================================================================
# Ce fichier est prêt à l'emploi.
# Copiez-collez l'intégralité de ce code dans votre azure-pipelines.yml

trigger:
- main  # Se déclenche sur un push vers la branche 'main'

pool:
  vmImage: 'windows-latest' # Agent d'exécution Windows

# Assurez-vous que le nom de votre groupe de variables est correct
variables:
- group: DependencyTrack-Creds

jobs:
- job: Build_and_Upload_SBOM
  displayName: 'Générer et envoyer le SBOM pour .NET'
  steps:

  # --- ÉTAPE DE DÉBOGAGE ---
  # Cette première étape affiche tous les fichiers pour nous aider à vérifier les chemins.
  - script: |
      echo "Affichage de la structure des fichiers et dossiers..."
      echo "Le répertoire de travail actuel est : $(System.DefaultWorkingDirectory)"
      dir /s
    displayName: '1. Lister les fichiers du projet (Debug)'

  # --- ÉTAPE 1 : INSTALLATION .NET ---
  - task: UseDotNet@2
    displayName: '2. Installer le SDK .NET 8.x'
    inputs:
      packageType: 'sdk'
      version: '8.x'

  # --- ÉTAPE 2 : RESTAURATION DES DÉPENDANCES ---
  # La pipeline essaie de trouver le fichier .sln avec le chemin que nous supposons être correct.
  - task: DotNetCoreCLI@2
    displayName: '3. Restaurer les dépendances NuGet'
    inputs:
      command: 'restore'
      projects: 'ResearchDependencyTrack/ResearchDependencyTrack.sln' # CHEMIN À VÉRIFIER

  # --- ÉTAPE 3 : INSTALLATION DE CYCLONEDX ---
  - task: DotNetCoreCLI@2
    displayName: '4. Installer l''outil CycloneDX pour .NET'
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install --global CycloneDX.Tool'

  # --- ÉTAPE 4 : GÉNÉRATION DU SBOM ---
  # Le même chemin que pour l'étape 2 doit être utilisé ici.
  - script: |
      cyclonedx -i ResearchDependencyTrack/ResearchDependencyTrack.sln -o $(Build.ArtifactStagingDirectory)/sbom.json # CHEMIN À VÉRIFIER
    displayName: '5. Générer le SBOM'

  # --- ÉTAPE 5 : ENVOI À DEPENDENCY-TRACK ---
  - task: Bash@3
    displayName: '6. Envoyer le SBOM à Dependency-Track'
    inputs:
      targetType: 'inline'
      script: |
        echo "Téléversement du fichier sbom.json vers Dependency-Track..."
        PROJECT_NAME="ResearchDependencyTrack"
        PROJECT_VERSION="$(Build.BuildNumber)"
        curl -X "POST" \
             -H "X-Api-Key: $(DTACK_API_KEY)" \
             -H "Content-Type: multipart/form-data" \
             -F "autoCreate=true" \
             -F "projectName=${PROJECT_NAME}" \
             -F "projectVersion=${PROJECT_VERSION}" \
             -F "bom=@$(Build.ArtifactStagingDirectory)/sbom.json" \
             "$(DT_API_URL)/api/v1/bom"
